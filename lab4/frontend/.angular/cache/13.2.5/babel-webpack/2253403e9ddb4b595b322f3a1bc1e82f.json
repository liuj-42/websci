{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"input\"];\nconst _c1 = [\"thumb\"];\nconst _c2 = [\"thumbValue\"];\n\nconst _c3 = function (a0) {\n  return {\n    \"thumb-active\": a0\n  };\n};\n\nconst RANGE_VALUE_ACCESOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbRangeComponent),\n  multi: true\n};\n\nclass MdbRangeComponent {\n  constructor(_cdRef) {\n    this._cdRef = _cdRef;\n    this.min = 0;\n    this.max = 100;\n    this.rangeValueChange = new EventEmitter();\n    this.visibility = false; // Control Value Accessor Methods\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  set default(value) {\n    this._default = value;\n  }\n\n  onchange(event) {\n    this.onChange(event.target.value);\n  }\n\n  onInput() {\n    this.rangeValueChange.emit({\n      value: this.value\n    });\n    this.focusRangeInput();\n  }\n\n  ngAfterViewInit() {\n    this.thumbPositionUpdate();\n  }\n\n  focusRangeInput() {\n    this.input.nativeElement.focus();\n    this.visibility = true;\n  }\n\n  blurRangeInput() {\n    this.input.nativeElement.blur();\n    this.visibility = false;\n  }\n\n  thumbPositionUpdate() {\n    const rangeInput = this.input.nativeElement;\n    const inputValue = rangeInput.value;\n    const minValue = rangeInput.min ? rangeInput.min : 0;\n    const maxValue = rangeInput.max ? rangeInput.max : 100;\n    const newValue = Number((inputValue - minValue) * 100 / (maxValue - minValue));\n    this.value = inputValue;\n    this.thumbStyle = {\n      left: `calc(${newValue}% + (${8 - newValue * 0.15}px))`\n    };\n  }\n\n  writeValue(value) {\n    this.value = value;\n\n    this._cdRef.markForCheck();\n\n    setTimeout(() => {\n      this.thumbPositionUpdate();\n    }, 0);\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n}\n\nMdbRangeComponent.ɵfac = function MdbRangeComponent_Factory(t) {\n  return new (t || MdbRangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nMdbRangeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MdbRangeComponent,\n  selectors: [[\"mdb-range\"]],\n  viewQuery: function MdbRangeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.thumb = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.thumbValue = _t.first);\n    }\n  },\n  hostBindings: function MdbRangeComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function MdbRangeComponent_change_HostBindingHandler($event) {\n        return ctx.onchange($event);\n      })(\"input\", function MdbRangeComponent_input_HostBindingHandler() {\n        return ctx.onInput();\n      });\n    }\n  },\n  inputs: {\n    id: \"id\",\n    required: \"required\",\n    name: \"name\",\n    value: \"value\",\n    disabled: \"disabled\",\n    label: \"label\",\n    min: \"min\",\n    max: \"max\",\n    step: \"step\",\n    default: \"default\",\n    defaultRangeCounterClass: \"defaultRangeCounterClass\"\n  },\n  outputs: {\n    rangeValueChange: \"rangeValueChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([RANGE_VALUE_ACCESOR])],\n  decls: 10,\n  vars: 15,\n  consts: [[\"for\", \"id\", 1, \"form-label\"], [1, \"range\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"5\", 1, \"form-range\", 3, \"name\", \"disabled\", \"id\", \"min\", \"max\", \"step\", \"value\", \"ngModel\", \"ngModelChange\", \"input\", \"blur\", \"mousedown\", \"mouseup\", \"touchstart\", \"touchend\"], [\"input\", \"\"], [1, \"thumb\", 3, \"ngStyle\", \"ngClass\"], [\"thumb\", \"\"], [1, \"thumb-value\"], [\"thumbValue\", \"\"]],\n  template: function MdbRangeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"label\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"input\", 2, 3);\n      i0.ɵɵlistener(\"ngModelChange\", function MdbRangeComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.value = $event;\n      })(\"input\", function MdbRangeComponent_Template_input_input_3_listener() {\n        return ctx.thumbPositionUpdate();\n      })(\"blur\", function MdbRangeComponent_Template_input_blur_3_listener() {\n        return ctx.blurRangeInput();\n      })(\"mousedown\", function MdbRangeComponent_Template_input_mousedown_3_listener() {\n        return ctx.focusRangeInput();\n      })(\"mouseup\", function MdbRangeComponent_Template_input_mouseup_3_listener() {\n        return ctx.blurRangeInput();\n      })(\"touchstart\", function MdbRangeComponent_Template_input_touchstart_3_listener() {\n        return ctx.focusRangeInput();\n      })(\"touchend\", function MdbRangeComponent_Template_input_touchend_3_listener() {\n        return ctx.blurRangeInput();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"span\", 4, 5)(7, \"span\", 6, 7);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"name\", ctx.name)(\"disabled\", ctx.disabled)(\"id\", ctx.id)(\"min\", ctx.min)(\"max\", ctx.max)(\"step\", ctx.step)(\"value\", ctx.value)(\"ngModel\", ctx.value)(\"id\", ctx.id);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngStyle\", ctx.thumbStyle)(\"ngClass\", i0.ɵɵpureFunction1(13, _c3, ctx.visibility));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.value);\n    }\n  },\n  directives: [i1.RangeValueAccessor, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel, i2.NgStyle, i2.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbRangeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mdb-range',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [RANGE_VALUE_ACCESOR],\n      template: \"<label for=\\\"id\\\" class=\\\"form-label\\\">{{ label }}</label>\\n<div class=\\\"range\\\">\\n  <input\\n    #input\\n    [name]=\\\"name\\\"\\n    type=\\\"range\\\"\\n    [disabled]=\\\"disabled\\\"\\n    [id]=\\\"id\\\"\\n    [min]=\\\"min\\\"\\n    [max]=\\\"max\\\"\\n    [step]=\\\"step\\\"\\n    [value]=\\\"value\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    class=\\\"form-range\\\"\\n    min=\\\"0\\\"\\n    max=\\\"5\\\"\\n    [id]=\\\"id\\\"\\n    (input)=\\\"thumbPositionUpdate()\\\"\\n    (blur)=\\\"blurRangeInput()\\\"\\n    (mousedown)=\\\"focusRangeInput()\\\"\\n    (mouseup)=\\\"blurRangeInput()\\\"\\n    (touchstart)=\\\"focusRangeInput()\\\"\\n    (touchend)=\\\"blurRangeInput()\\\"\\n  />\\n  <span #thumb class=\\\"thumb\\\" [ngStyle]=\\\"thumbStyle\\\" [ngClass]=\\\"{ 'thumb-active': this.visibility }\\\">\\n    <span #thumbValue class=\\\"thumb-value\\\">{{ value }}</span>\\n  </span>\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    input: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    thumb: [{\n      type: ViewChild,\n      args: ['thumb']\n    }],\n    thumbValue: [{\n      type: ViewChild,\n      args: ['thumbValue']\n    }],\n    id: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    default: [{\n      type: Input\n    }],\n    defaultRangeCounterClass: [{\n      type: Input\n    }],\n    rangeValueChange: [{\n      type: Output\n    }],\n    onchange: [{\n      type: HostListener,\n      args: ['change', ['$event']]\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input']\n    }]\n  });\n})();\n\nclass MdbRangeModule {}\n\nMdbRangeModule.ɵfac = function MdbRangeModule_Factory(t) {\n  return new (t || MdbRangeModule)();\n};\n\nMdbRangeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbRangeModule\n});\nMdbRangeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbRangeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [MdbRangeComponent],\n      exports: [MdbRangeComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbRangeComponent, MdbRangeModule };","map":{"version":3,"sources":["C:/Users/james/school/spring2022/websci/websci/lab4/frontend/node_modules/mdb-angular-ui-kit/fesm2015/mdb-angular-ui-kit-range.mjs"],"names":["i0","forwardRef","EventEmitter","Component","ChangeDetectionStrategy","ViewChild","Input","Output","HostListener","NgModule","i2","CommonModule","i1","NG_VALUE_ACCESSOR","FormsModule","coerceBooleanProperty","RANGE_VALUE_ACCESOR","provide","useExisting","MdbRangeComponent","multi","constructor","_cdRef","min","max","rangeValueChange","visibility","onChange","_","onTouched","disabled","_disabled","value","default","_default","onchange","event","target","onInput","emit","focusRangeInput","ngAfterViewInit","thumbPositionUpdate","input","nativeElement","focus","blurRangeInput","blur","rangeInput","inputValue","minValue","maxValue","newValue","Number","thumbStyle","left","writeValue","markForCheck","setTimeout","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","ChangeDetectorRef","ɵcmp","RangeValueAccessor","DefaultValueAccessor","NgControlStatus","NgModel","NgStyle","NgClass","type","args","selector","changeDetection","OnPush","providers","template","thumb","thumbValue","id","required","name","label","step","defaultRangeCounterClass","MdbRangeModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nconst RANGE_VALUE_ACCESOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => MdbRangeComponent),\n    multi: true,\n};\nclass MdbRangeComponent {\n    constructor(_cdRef) {\n        this._cdRef = _cdRef;\n        this.min = 0;\n        this.max = 100;\n        this.rangeValueChange = new EventEmitter();\n        this.visibility = false;\n        // Control Value Accessor Methods\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    get default() {\n        return this._default;\n    }\n    set default(value) {\n        this._default = value;\n    }\n    onchange(event) {\n        this.onChange(event.target.value);\n    }\n    onInput() {\n        this.rangeValueChange.emit({ value: this.value });\n        this.focusRangeInput();\n    }\n    ngAfterViewInit() {\n        this.thumbPositionUpdate();\n    }\n    focusRangeInput() {\n        this.input.nativeElement.focus();\n        this.visibility = true;\n    }\n    blurRangeInput() {\n        this.input.nativeElement.blur();\n        this.visibility = false;\n    }\n    thumbPositionUpdate() {\n        const rangeInput = this.input.nativeElement;\n        const inputValue = rangeInput.value;\n        const minValue = rangeInput.min ? rangeInput.min : 0;\n        const maxValue = rangeInput.max ? rangeInput.max : 100;\n        const newValue = Number(((inputValue - minValue) * 100) / (maxValue - minValue));\n        this.value = inputValue;\n        this.thumbStyle = { left: `calc(${newValue}% + (${8 - newValue * 0.15}px))` };\n    }\n    writeValue(value) {\n        this.value = value;\n        this._cdRef.markForCheck();\n        setTimeout(() => {\n            this.thumbPositionUpdate();\n        }, 0);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMdbRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRangeComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMdbRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbRangeComponent, selector: \"mdb-range\", inputs: { id: \"id\", required: \"required\", name: \"name\", value: \"value\", disabled: \"disabled\", label: \"label\", min: \"min\", max: \"max\", step: \"step\", default: \"default\", defaultRangeCounterClass: \"defaultRangeCounterClass\" }, outputs: { rangeValueChange: \"rangeValueChange\" }, host: { listeners: { \"change\": \"onchange($event)\", \"input\": \"onInput()\" } }, providers: [RANGE_VALUE_ACCESOR], viewQueries: [{ propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"thumb\", first: true, predicate: [\"thumb\"], descendants: true }, { propertyName: \"thumbValue\", first: true, predicate: [\"thumbValue\"], descendants: true }], ngImport: i0, template: \"<label for=\\\"id\\\" class=\\\"form-label\\\">{{ label }}</label>\\n<div class=\\\"range\\\">\\n  <input\\n    #input\\n    [name]=\\\"name\\\"\\n    type=\\\"range\\\"\\n    [disabled]=\\\"disabled\\\"\\n    [id]=\\\"id\\\"\\n    [min]=\\\"min\\\"\\n    [max]=\\\"max\\\"\\n    [step]=\\\"step\\\"\\n    [value]=\\\"value\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    class=\\\"form-range\\\"\\n    min=\\\"0\\\"\\n    max=\\\"5\\\"\\n    [id]=\\\"id\\\"\\n    (input)=\\\"thumbPositionUpdate()\\\"\\n    (blur)=\\\"blurRangeInput()\\\"\\n    (mousedown)=\\\"focusRangeInput()\\\"\\n    (mouseup)=\\\"blurRangeInput()\\\"\\n    (touchstart)=\\\"focusRangeInput()\\\"\\n    (touchend)=\\\"blurRangeInput()\\\"\\n  />\\n  <span #thumb class=\\\"thumb\\\" [ngStyle]=\\\"thumbStyle\\\" [ngClass]=\\\"{ 'thumb-active': this.visibility }\\\">\\n    <span #thumbValue class=\\\"thumb-value\\\">{{ value }}</span>\\n  </span>\\n</div>\\n\", directives: [{ type: i1.RangeValueAccessor, selector: \"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]\" }, { type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRangeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mdb-range', changeDetection: ChangeDetectionStrategy.OnPush, providers: [RANGE_VALUE_ACCESOR], template: \"<label for=\\\"id\\\" class=\\\"form-label\\\">{{ label }}</label>\\n<div class=\\\"range\\\">\\n  <input\\n    #input\\n    [name]=\\\"name\\\"\\n    type=\\\"range\\\"\\n    [disabled]=\\\"disabled\\\"\\n    [id]=\\\"id\\\"\\n    [min]=\\\"min\\\"\\n    [max]=\\\"max\\\"\\n    [step]=\\\"step\\\"\\n    [value]=\\\"value\\\"\\n    [(ngModel)]=\\\"value\\\"\\n    class=\\\"form-range\\\"\\n    min=\\\"0\\\"\\n    max=\\\"5\\\"\\n    [id]=\\\"id\\\"\\n    (input)=\\\"thumbPositionUpdate()\\\"\\n    (blur)=\\\"blurRangeInput()\\\"\\n    (mousedown)=\\\"focusRangeInput()\\\"\\n    (mouseup)=\\\"blurRangeInput()\\\"\\n    (touchstart)=\\\"focusRangeInput()\\\"\\n    (touchend)=\\\"blurRangeInput()\\\"\\n  />\\n  <span #thumb class=\\\"thumb\\\" [ngStyle]=\\\"thumbStyle\\\" [ngClass]=\\\"{ 'thumb-active': this.visibility }\\\">\\n    <span #thumbValue class=\\\"thumb-value\\\">{{ value }}</span>\\n  </span>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { input: [{\n                type: ViewChild,\n                args: ['input']\n            }], thumb: [{\n                type: ViewChild,\n                args: ['thumb']\n            }], thumbValue: [{\n                type: ViewChild,\n                args: ['thumbValue']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], default: [{\n                type: Input\n            }], defaultRangeCounterClass: [{\n                type: Input\n            }], rangeValueChange: [{\n                type: Output\n            }], onchange: [{\n                type: HostListener,\n                args: ['change', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input']\n            }] } });\n\nclass MdbRangeModule {\n}\nMdbRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRangeModule, declarations: [MdbRangeComponent], imports: [CommonModule, FormsModule], exports: [MdbRangeComponent] });\nMdbRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRangeModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbRangeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule],\n                    declarations: [MdbRangeComponent],\n                    exports: [MdbRangeComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbRangeComponent, MdbRangeModule };\n"]},"metadata":{},"sourceType":"module"}